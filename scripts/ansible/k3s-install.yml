---
# K3s Installation and Configuration Playbook
- name: Install and configure K3s
  hosts: k3s_nodes
  become: true
  vars:
    k3s_version: "{{ lookup('env', 'K3S_VERSION') | default('v1.28.5+k3s1') }}"
    metallb_ip_range: "{{ lookup('env', 'METALLB_IP_RANGE') | default('192.168.1.200-192.168.1.210') }}"
    storage_path: "{{ lookup('env', 'STORAGE_PATH') | default('/mnt/k8s-data') }}"
    domain: "{{ lookup('env', 'DOMAIN') | default('homelab.lan') }}"

  tasks:
    - name: Create storage directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ storage_path }}"
        - "{{ storage_path }}/data"
        - "{{ storage_path }}/nvme"

    - name: Download K3s installation script
      get_url:
        url: https://get.k3s.io
        dest: /tmp/k3s-install.sh
        mode: '0755'

    - name: Configure K3s environment
      copy:
        dest: /etc/systemd/system/k3s.service.env
        content: |
          K3S_KUBECONFIG_MODE="644"
          INSTALL_K3S_VERSION="{{ k3s_version }}"
          K3S_CLUSTER_INIT="true"
          K3S_DISABLE_NETWORK_POLICY="false"
          K3S_DISABLE_TRAEFIK="true"
          K3S_DISABLE_SERVICELB="true"
          K3S_FLANNEL_BACKEND="host-gw"
          CLUSTER_CIDR="10.0.0.0/16"
          SERVICE_CIDR="10.1.0.0/16"
          CLUSTER_DNS_IP="10.1.0.10"

    - name: Install K3s
      shell: |
        /tmp/k3s-install.sh
      environment:
        INSTALL_K3S_VERSION: "{{ k3s_version }}"

    - name: Wait for K3s to be ready
      wait_for:
        path: /etc/rancher/k3s/k3s.yaml
        state: present
        timeout: 300

    - name: Copy kubeconfig for user access
      copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: true
        mode: '0600'

    - name: Configure kubectl for current user
      command: |
        k3s kubectl config set-cluster default \
          --server=https://127.0.0.1:6443 \
          --certificate-authority=/var/lib/rancher/k3s/server/tls/server-ca.crt
      become: false

    - name: Install helm
      shell: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      args:
        creates: /usr/local/bin/helm

    - name: Create ArgoCD namespace
      command: |
        k3s kubectl create namespace argocd
      ignore_errors: true

    - name: Install ArgoCD
      command: |
        k3s kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/core-install.yaml

    - name: Wait for ArgoCD to be ready
      command: |
        k3s kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd

    - name: Get ArgoCD admin password
      command: |
        k3s kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d
      register: argocd_password
      changed_when: false

    - name: Save ArgoCD credentials
      copy:
        content: |
          ArgoCD Credentials:
          URL: https://argocd.{{ domain }}
          Username: admin
          Password: {{ argocd_password.stdout }}
        dest: "{{ ansible_env.HOME }}/argocd-credentials.txt"
        mode: '0600'
      become: false

    - name: Display ArgoCD credentials
      debug:
        msg: |
          ArgoCD Credentials:
          URL: https://argocd.{{ domain }}
          Username: admin
          Password: {{ argocd_password.stdout }}
